{"expireTime":9007200872306530000,"key":"gatsby-plugin-mdx-entire-payload-5265e841e2d40cf1990ed07d6937e0b3-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/Developement/Assignment Tasks/Plasm/src/layouts/docs.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":87,"offset":88},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":90},"end":{"line":5,"column":29,"offset":118},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Looking for a ","position":{"start":{"line":8,"column":1,"offset":122},"end":{"line":8,"column":15,"offset":136},"indent":[]}},{"type":"jsx","value":"<Link to='/docs/v1/javascript-SDK/quick-start'>","position":{"start":{"line":8,"column":15,"offset":136},"end":{"line":8,"column":62,"offset":183},"indent":[]}},{"type":"text","value":"quickstart","position":{"start":{"line":8,"column":62,"offset":183},"end":{"line":8,"column":72,"offset":193},"indent":[]}},{"type":"jsx","value":"</Link>","position":{"start":{"line":8,"column":72,"offset":193},"end":{"line":8,"column":79,"offset":200},"indent":[]}},{"type":"text","value":"?","position":{"start":{"line":8,"column":79,"offset":200},"end":{"line":8,"column":80,"offset":201},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":122},"end":{"line":8,"column":80,"offset":201},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The SDK ","position":{"start":{"line":10,"column":1,"offset":205},"end":{"line":10,"column":9,"offset":213},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"cannot execute trades or send transactions on your behalf","position":{"start":{"line":10,"column":10,"offset":214},"end":{"line":10,"column":67,"offset":271},"indent":[]}}],"position":{"start":{"line":10,"column":9,"offset":213},"end":{"line":10,"column":68,"offset":272},"indent":[]}},{"type":"text","value":". Rather, it offers utility classes and functions which make it easy to calculate the data required to safely interact with Kwikswap. Nearly everything you need to safely transact with Kwikswap is provided by the ","position":{"start":{"line":10,"column":68,"offset":272},"end":{"line":10,"column":281,"offset":485},"indent":[]}},{"type":"jsx","value":"<Link to='/docs/v1/SDK/trade'>","position":{"start":{"line":10,"column":281,"offset":485},"end":{"line":10,"column":311,"offset":515},"indent":[]}},{"type":"text","value":"Trade","position":{"start":{"line":10,"column":311,"offset":515},"end":{"line":10,"column":316,"offset":520},"indent":[]}},{"type":"jsx","value":"</Link>","position":{"start":{"line":10,"column":316,"offset":520},"end":{"line":10,"column":323,"offset":527},"indent":[]}},{"type":"text","value":" entity. However, it is your responsibility to use this data to send transactions in whatever context makes sense for your application.","position":{"start":{"line":10,"column":323,"offset":527},"end":{"line":10,"column":458,"offset":662},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":205},"end":{"line":10,"column":458,"offset":662},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This guide will focus exclusively on sending a transaction to the ","position":{"start":{"line":12,"column":1,"offset":666},"end":{"line":12,"column":67,"offset":732},"indent":[]}},{"type":"jsx","value":"<Link to='/docs/v1/smart-contracts/router02'>","position":{"start":{"line":12,"column":67,"offset":732},"end":{"line":12,"column":112,"offset":777},"indent":[]}},{"type":"text","value":"currently recommended Kwikswap router","position":{"start":{"line":12,"column":112,"offset":777},"end":{"line":12,"column":149,"offset":814},"indent":[]}},{"type":"jsx","value":"</Link>","position":{"start":{"line":12,"column":149,"offset":814},"end":{"line":12,"column":156,"offset":821},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":12,"column":156,"offset":821},"end":{"line":12,"column":157,"offset":822},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":666},"end":{"line":12,"column":157,"offset":822},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Sending a Transaction to the Router","position":{"start":{"line":14,"column":3,"offset":828},"end":{"line":14,"column":38,"offset":863},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":826},"end":{"line":14,"column":38,"offset":863},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's say we want to trade 1 WETH for as much DAI as possible:","position":{"start":{"line":16,"column":1,"offset":867},"end":{"line":16,"column":63,"offset":929},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":867},"end":{"line":16,"column":63,"offset":929},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"import { ChainId, Token, WETH, Fetcher, Trade, Route, TokenAmount, TradeType } from '@kwikswap/sdk'\n\nconst DAI = new Token(ChainId.MAINNET, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18)\n\n// note that you may want/need to handle this async code differently,\n// for example if top-level await is not an option\nconst pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId])\n\nconst route = new Route([pair], WETH[DAI.chainId])\n\nconst amountIn = '1000000000000000000' // 1 WETH\n\nconst trade = new Trade(route, new TokenAmount(WETH[DAI.chainId], amountIn), TradeType.EXACT_INPUT)","position":{"start":{"line":18,"column":1,"offset":933},"end":{"line":32,"column":4,"offset":1544},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So, we've constructed a trade entity, but how do we use it to actually send a transaction? There are still a few pieces we need to put in place.","position":{"start":{"line":34,"column":1,"offset":1548},"end":{"line":34,"column":145,"offset":1692},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1548},"end":{"line":34,"column":145,"offset":1692},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before going on, we should explore how ETH works in the context of trading. Internally, the SDK uses WETH, as all Kwikswap pairs use WETH under the hood. However, it's perfectly possible for you as an end user to use ETH, and rely on the router to handle converting to/from WETH. So, let's use ETH.","position":{"start":{"line":36,"column":1,"offset":1696},"end":{"line":36,"column":299,"offset":1994},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1696},"end":{"line":36,"column":299,"offset":1994},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first step is selecting the appropriate router function. The names of router functions are intended to be self-explanatory; in this case we want ","position":{"start":{"line":38,"column":1,"offset":1998},"end":{"line":38,"column":150,"offset":2147},"indent":[]}},{"type":"jsx","value":"<Link to='/docs/v1/smart-contracts/router02/#swapexactethfortokens'>","position":{"start":{"line":38,"column":150,"offset":2147},"end":{"line":38,"column":218,"offset":2215},"indent":[]}},{"type":"text","value":"swapExactETHForTokens","position":{"start":{"line":38,"column":218,"offset":2215},"end":{"line":38,"column":239,"offset":2236},"indent":[]}},{"type":"jsx","value":"</Link>","position":{"start":{"line":38,"column":239,"offset":2236},"end":{"line":38,"column":246,"offset":2243},"indent":[]}},{"type":"text","value":", because we're...swapping an exact amount of ETH for tokens.","position":{"start":{"line":38,"column":246,"offset":2243},"end":{"line":38,"column":307,"offset":2304},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1998},"end":{"line":38,"column":307,"offset":2304},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That Solidity interface for this function is:","position":{"start":{"line":40,"column":1,"offset":2308},"end":{"line":40,"column":46,"offset":2353},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":2308},"end":{"line":40,"column":46,"offset":2353},"indent":[]}},{"type":"code","lang":"solidity","meta":null,"value":"function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n  external\n  payable\n  returns (uint[] memory amounts);","position":{"start":{"line":42,"column":1,"offset":2357},"end":{"line":47,"column":4,"offset":2535},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Jumping back to our trading code, we can construct all the necessary parameters:","position":{"start":{"line":49,"column":1,"offset":2539},"end":{"line":49,"column":81,"offset":2619},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2539},"end":{"line":49,"column":81,"offset":2619},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"import { Percent } from '@kwikswap/sdk'\n\nconst slippageTolerance = new Percent('50', '10000') // 50 bips, or 0.50%\n\nconst amountOutMin = trade.minimumAmountOut(slippageTolerance).raw // needs to be converted to e.g. hex\nconst path = [WETH[DAI.chainId].address, DAI.address]\nconst to = '' // should be a checksummed recipient address\nconst deadline = Math.floor(Date.now() / 1000) + 60 * 20 // 20 minutes from the current Unix time\nconst value = trade.inputAmount.raw // // needs to be converted to e.g. hex","position":{"start":{"line":51,"column":1,"offset":2623},"end":{"line":61,"column":4,"offset":3157},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The slippage tolerance encodes ","position":{"start":{"line":63,"column":1,"offset":3161},"end":{"line":63,"column":32,"offset":3192},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"how large of a price movement we're willing to tolerate before our trade will fail to execute","position":{"start":{"line":63,"column":33,"offset":3193},"end":{"line":63,"column":126,"offset":3286},"indent":[]}}],"position":{"start":{"line":63,"column":32,"offset":3192},"end":{"line":63,"column":127,"offset":3287},"indent":[]}},{"type":"text","value":". Since Ethereum transactions are broadcast and confirmed in an adversarial environment, this tolerance is the best we can do to protect ourselves against price movements. We use this slippage tolerance to calculate the ","position":{"start":{"line":63,"column":127,"offset":3287},"end":{"line":63,"column":347,"offset":3507},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"minumum","position":{"start":{"line":63,"column":348,"offset":3508},"end":{"line":63,"column":355,"offset":3515},"indent":[]}}],"position":{"start":{"line":63,"column":347,"offset":3507},"end":{"line":63,"column":356,"offset":3516},"indent":[]}},{"type":"text","value":" amount of DAI we must receive before our trade reverts, thanks to ","position":{"start":{"line":63,"column":356,"offset":3516},"end":{"line":63,"column":423,"offset":3583},"indent":[]}},{"type":"jsx","value":"<Link to='/docs/v1/SDK/trade/#minimumamountout-since-204'>","position":{"start":{"line":63,"column":423,"offset":3583},"end":{"line":63,"column":481,"offset":3641},"indent":[]}},{"type":"text","value":"minimumAmountOut","position":{"start":{"line":63,"column":481,"offset":3641},"end":{"line":63,"column":497,"offset":3657},"indent":[]}},{"type":"jsx","value":"</Link>","position":{"start":{"line":63,"column":497,"offset":3657},"end":{"line":63,"column":504,"offset":3664},"indent":[]}},{"type":"text","value":". Note that this code calculates this worst-case outcome ","position":{"start":{"line":63,"column":504,"offset":3664},"end":{"line":63,"column":561,"offset":3721},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"assuming that the current price, i.e the route's mid price,","position":{"start":{"line":63,"column":562,"offset":3722},"end":{"line":63,"column":621,"offset":3781},"indent":[]}}],"position":{"start":{"line":63,"column":561,"offset":3721},"end":{"line":63,"column":622,"offset":3782},"indent":[]}},{"type":"text","value":" is fair (usually a good assumption because of arbitrage).","position":{"start":{"line":63,"column":622,"offset":3782},"end":{"line":63,"column":680,"offset":3840},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":3161},"end":{"line":63,"column":680,"offset":3840},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The path is simply the ordered list of token addresses we're trading through, in our case WETH and DAI (note that we use the WETH address, even though we're using ETH). ","position":{"start":{"line":65,"column":1,"offset":3844},"end":{"line":65,"column":170,"offset":4013},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":3844},"end":{"line":65,"column":170,"offset":4013},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The to address is the address that will receive the DAI.","position":{"start":{"line":67,"column":1,"offset":4017},"end":{"line":67,"column":57,"offset":4073},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":4017},"end":{"line":67,"column":57,"offset":4073},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The deadline is the Unix timestamp after which the transaction will fail, to protect us in the case that our transaction takes a long time to confirm and we wish to rescind our trade.","position":{"start":{"line":69,"column":1,"offset":4077},"end":{"line":69,"column":184,"offset":4260},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":4077},"end":{"line":69,"column":184,"offset":4260},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The value is the amount of ETH that must be included as the ","position":{"start":{"line":71,"column":1,"offset":4264},"end":{"line":71,"column":61,"offset":4324},"indent":[]}},{"type":"inlineCode","value":"msg.value","position":{"start":{"line":71,"column":61,"offset":4324},"end":{"line":71,"column":72,"offset":4335},"indent":[]}},{"type":"text","value":" in our transaction.","position":{"start":{"line":71,"column":72,"offset":4335},"end":{"line":71,"column":92,"offset":4355},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":4264},"end":{"line":71,"column":92,"offset":4355},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":74,"column":1,"offset":4359},"end":{"line":74,"column":31,"offset":4389},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":74,"column":31,"offset":4389}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Developement/Assignment Tasks/Plasm/src/layouts/docs.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Link = makeShortcode(\"Link\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Looking for a `}<Link to='/docs/v1/javascript-SDK/quick-start' mdxType=\"Link\">{`quickstart`}</Link>{`?`}</p>\n    <p>{`The SDK `}<em parentName=\"p\">{`cannot execute trades or send transactions on your behalf`}</em>{`. Rather, it offers utility classes and functions which make it easy to calculate the data required to safely interact with Kwikswap. Nearly everything you need to safely transact with Kwikswap is provided by the `}<Link to='/docs/v1/SDK/trade' mdxType=\"Link\">{`Trade`}</Link>{` entity. However, it is your responsibility to use this data to send transactions in whatever context makes sense for your application.`}</p>\n    <p>{`This guide will focus exclusively on sending a transaction to the `}<Link to='/docs/v1/smart-contracts/router02' mdxType=\"Link\">{`currently recommended Kwikswap router`}</Link>{`.`}</p>\n    <h1 {...{\n      \"id\": \"sending-a-transaction-to-the-router\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#sending-a-transaction-to-the-router\",\n        \"aria-label\": \"sending a transaction to the router permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Sending a Transaction to the Router`}</h1>\n    <p>{`Let’s say we want to trade 1 WETH for as much DAI as possible:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { ChainId, Token, WETH, Fetcher, Trade, Route, TokenAmount, TradeType } from '@kwikswap/sdk'\n\nconst DAI = new Token(ChainId.MAINNET, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18)\n\n// note that you may want/need to handle this async code differently,\n// for example if top-level await is not an option\nconst pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId])\n\nconst route = new Route([pair], WETH[DAI.chainId])\n\nconst amountIn = '1000000000000000000' // 1 WETH\n\nconst trade = new Trade(route, new TokenAmount(WETH[DAI.chainId], amountIn), TradeType.EXACT_INPUT)\n`}</code></pre>\n    <p>{`So, we’ve constructed a trade entity, but how do we use it to actually send a transaction? There are still a few pieces we need to put in place.`}</p>\n    <p>{`Before going on, we should explore how ETH works in the context of trading. Internally, the SDK uses WETH, as all Kwikswap pairs use WETH under the hood. However, it’s perfectly possible for you as an end user to use ETH, and rely on the router to handle converting to/from WETH. So, let’s use ETH.`}</p>\n    <p>{`The first step is selecting the appropriate router function. The names of router functions are intended to be self-explanatory; in this case we want `}<Link to='/docs/v1/smart-contracts/router02/#swapexactethfortokens' mdxType=\"Link\">{`swapExactETHForTokens`}</Link>{`, because we’re…swapping an exact amount of ETH for tokens.`}</p>\n    <p>{`That Solidity interface for this function is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-solidity\"\n      }}>{`function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n  external\n  payable\n  returns (uint[] memory amounts);\n`}</code></pre>\n    <p>{`Jumping back to our trading code, we can construct all the necessary parameters:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Percent } from '@kwikswap/sdk'\n\nconst slippageTolerance = new Percent('50', '10000') // 50 bips, or 0.50%\n\nconst amountOutMin = trade.minimumAmountOut(slippageTolerance).raw // needs to be converted to e.g. hex\nconst path = [WETH[DAI.chainId].address, DAI.address]\nconst to = '' // should be a checksummed recipient address\nconst deadline = Math.floor(Date.now() / 1000) + 60 * 20 // 20 minutes from the current Unix time\nconst value = trade.inputAmount.raw // // needs to be converted to e.g. hex\n`}</code></pre>\n    <p>{`The slippage tolerance encodes `}<em parentName=\"p\">{`how large of a price movement we’re willing to tolerate before our trade will fail to execute`}</em>{`. Since Ethereum transactions are broadcast and confirmed in an adversarial environment, this tolerance is the best we can do to protect ourselves against price movements. We use this slippage tolerance to calculate the `}<em parentName=\"p\">{`minumum`}</em>{` amount of DAI we must receive before our trade reverts, thanks to `}<Link to='/docs/v1/SDK/trade/#minimumamountout-since-204' mdxType=\"Link\">{`minimumAmountOut`}</Link>{`. Note that this code calculates this worst-case outcome `}<em parentName=\"p\">{`assuming that the current price, i.e the route’s mid price,`}</em>{` is fair (usually a good assumption because of arbitrage).`}</p>\n    <p>{`The path is simply the ordered list of token addresses we’re trading through, in our case WETH and DAI (note that we use the WETH address, even though we’re using ETH). `}</p>\n    <p>{`The to address is the address that will receive the DAI.`}</p>\n    <p>{`The deadline is the Unix timestamp after which the transaction will fail, to protect us in the case that our transaction takes a long time to confirm and we wish to rescind our trade.`}</p>\n    <p>{`The value is the amount of ETH that must be included as the `}<inlineCode parentName=\"p\">{`msg.value`}</inlineCode>{` in our transaction.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}